global
  maxconn 20480
  lua-load /etc/haproxy/acme-validation.lua
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice

  # ca-base /etc/ssl/certs
  # crt-base /etc/ssl/private

  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
  ssl-default-bind-options no-sslv3

defaults
  option forwardfor
  option http-server-close

  log global

  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms

  stats enable
  stats uri /stats
  stats realm Haproxy\ Statistics
  stats auth admin:haproxy

  default-server init-addr last,libc,none

frontend http-in
  bind *:80
  mode http

  acl url_acme_http01 path_beg /.well-known/acme-challenge/
  http-request use-service lua.acme-http01 if METH_GET url_acme_http01
  redirect scheme https code 301 if !{ ssl_fc }
  # reqadd X-Forwarded-Proto:\ http
  http-response add-header X-Forwarded-Proto http

  # acl letsencrypt_http_acl path_beg /.well-known/acme-challenge/
  # redirect scheme https if !letsencrypt_http_acl
  # use_backend letsencrypt_http if letsencrypt_http_acl

  default_backend www
  # default_backend my_http_backend

frontend https_in
  bind *:443 ssl crt /etc/haproxy/certs/ no-sslv3 no-tls-tickets no-tlsv10 no-tlsv11

  # rspadd Strict-Transport-Security:\ max-age=15768000
  http-response add-header Strict-Transport-Security max-age=15768000
  # bind *:443 ssl crt /usr/local/etc/haproxy/default.pem crt /usr/local/etc/haproxy/certs.d ciphers ECDHE-RSA-AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM
  # mode http

  # reqadd X-Forwarded-Proto:\ https

  use_backend map if { ssl_fc_sni -i mapapi.lab.highmaru.com }
  use_backend wrtc if { ssl_fc_sni -i wrtc.lab.highmaru.com }
  use_backend test if { ssl_fc_sni -i test.lab.highmaru.com }
  use_backend map if { ssl_fc_sni -i mapapi.badat.ga }
  use_backend wrtc if { ssl_fc_sni -i wrtc.badat.ga }
  # use_backend testback if { ssl_fc_sni -i test.badat.ga }
  # use_backend testfront if { ssl_fc_sni -i soccer.badat.ga }
  default_backend www
  # default_backend my_http_backend

# backend letsencrypt_http
#   mode http
#   server letsencrypt_http_srv 127.0.0.1:3000

backend map
  mode http
  server mapapi 192.168.0.2:3500
  
backend wrtc
  mode http
  server wrtc 192.168.0.2:3400
  
backend test
  mode http
  server aaa 192.168.0.2:3600
  
backend testback
  mode http
  server testback 192.168.0.10:3301
  http-request add-header X-Forwarded-Proto https if { ssl_fc }

backend testfront
  mode http
  server testfront 192.168.0.10:8080
  

backend www
  mode http
  # balance leastconn
  # option tcp-check
  # option log-health-checks
  # www is the name of the container HTTP
  server www 192.168.0.2:3000 #check resolvers docker resolve-prefer ipv4
  http-request add-header X-Forwarded-Proto https if { ssl_fc }
# backend my_http_backend
#   mode http
#   balance leastconn
#   option tcp-check
#   option log-health-checks
#   server server1 1.1.1.1:80 check port 80
#   server server2 2.2.2.2:80 check port 80
#   server server3 3.3.3.3:80 check port 80

# backend stat
#   stats enable
#   stats uri /my-stats
#   stats refresh 15s
#   stats show-legends
#   stats show-node